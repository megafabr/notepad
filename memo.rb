class Memo < Post

  # def initialize
  #   super # в дочернем классе означает дерни такой же метод у родительского класса
  #
  #   @url = ''
  # end
  #
   def read_from_console
      puts 'Новая заметка (все, что пишите до строчки "end"):'

      # Для старта цикла запишем в переменную line nil
      line = nil

      # Пока в переменной line не окажется (пока пользователь не введет) слово
      # «end», крутимся в цикле и считываем строку за строкой в массив @text.
      until line == 'end'
         # Читаем очередную строку и записываем из ввода пользователя
         line = STDIN.gets.chomp

         # Напомню, что изначально в переменной @text у нас пустой массив (смотрите
         # конструктор класса-родителя Post).
         @text << line
      end

      @text.pop # удаляем последнюю строчку
   end

   def to_strings
      time_string = "Создано: #{@created_at.strftime('%Y.%m.%d, %H:%M:%S')}\n"

      # Возвращаем массив @text с добавление в начало (методом массива unshift)
      # строчки с датой создания заметки.
      @text.unshift(time_string)
   end
end
